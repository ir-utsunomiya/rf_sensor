#!/usr/bin/python

import rospy
import numpy as np
from rf_sensor.msg import Rss
from rf_sensor.WiFiDevice import WiFiDevice

class RSS():
    def __init__(self):
        rospy.init_node('rss',anonymous=True)

        ## ros param
        self.ns         = rospy.get_namespace()
        self.frame_id   = rospy.get_param('~frame_id','rss')
        rss_topic       = rospy.get_param('~rss_topic',self.ns+'rss')
        ## WiFi Device param
        iface           = rospy.get_param('~iface','wlp5s0')
        channels        = rospy.get_param('channels',[1, 6, 11])
        ch_ts           = rospy.get_param('channel_hopper_sampling_time',1.0)
        filter          = rospy.get_param('filter','Beacon')

        # Publishers
        rospy.loginfo('[rss] publishing rss msg on {} topic'.format(rss_topic))
        self.pub_rss = rospy.Publisher(rss_topic,Rss,queue_size=1)

        # Init WiFi device
        self.wifidevice = WiFiDevice(iface=iface,
                                     channels=channels,
                                     channel_hopper_sampling_time=ch_ts,
                                     filter=filter)

    def run(self):
        seq = 0
        first = True
        self.wifidevice.chopper_start()
        self.wifidevice.tcpdump_start()

        while not rospy.is_shutdown():
            try:
                rss_msg = Rss()
                rss_msg.header.seq =+ seq
                rss_msg.header.stamp = rospy.Time.now()
                rss_msg.header.frame_id = self.frame_id

                m = self.wifidevice.read()
                string = m.decode().split(' ')
                c = 0
                rss_msg.data = list()
                for i in range(len(string)):
                    if 'MHz'   in string[i]: rss_msg.freq = np.int(string[i-1]); c+=100;
                    if 'BSSID' in string[i]: rss_msg.mac_address = str(string[i][6:]); c+=100;
                    if 'dBm'   in string[i]: rss_msg.data.append(np.int8(string[i][:-3])); c+=1;
                if c>200: #data is complete
                    #Publish msg
                    self.pub_rss.publish(rss_msg)
                else:
                    rospy.loginfo('[rss] incomplete data')
                    rospy.loginfo(m[0].decode())

                if first:
                    rospy.loginfo('[rss] Receiving messages')
                    first = False

            except:
                rospy.loginfo('[rss] corrupted packet')
                rospy.loginfo(m[0].decode())
                first = True
        s.close()

if __name__ == '__main__':
    rss = RSS()
    rss.run()
